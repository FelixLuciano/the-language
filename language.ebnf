upper = "A" | "B" | "C" | "D" | "E" | "F" | "G"
      | "H" | "I" | "J" | "K" | "L" | "M" | "N"
      | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
      | "V" | "W" | "X" | "Y" | "Z" ;

lower = "a" | "b" | "c" | "d" | "e" | "f" | "g"
      | "h" | "i" | "j" | "k" | "l" | "m" | "n"
      | "o" | "p" | "q" | "r" | "s" | "t" | "u"
      | "v" | "w" | "x" | "y" | "z" ;

letter = upper | lower ;

symbol = "_" ;

character = letter | symbol | " " ;

digit = "0" | "1" | "2" | "3" | "4" | "5" | "6"
      | "7" | "8" | "9" ;

identifier = letter , { letter | digit | "_" } ;

integer = number, { number } ;

string = '"', { character }, '"' ;

comment = "//", { [^\n] } ;

program = { statement_sequence } ;

block = "{", "\n", statement_sequence, "}" ;

statement_sequence = [ statement ], { "\n", statement } ;

statement = block_statement
          | inline_statement ;

block_statement = block_expression_chain
                | identifier, identifier, "=", block_expression_chain
                | identifier, ( "=" | "+=" | "-=" | "*=" | "/=" ), block_expression_chain
                | identifier, identifier, "(", [ function_interface ], ")", block
                | "return", expression_chain ;

expression_chain = block_expression_chain
                 | inline_expression_chain ;

block_expression_chain = [ IDENTIFIER, call ], block, { "else", [ IDENTIFIER, call ], block } ;

inline_statement = inline_expression_chain
                 | identifier, identifier, [assign, inline_expression_chain]
                 | identifier, ( "=" | "+=" | "-=" | "*=" | "/=" ), inline_expression_chain ;

inline_expression_chain = expression, { "else", expression } ;

expression = conditional_expression, [ "?", expression, ":", expression ] ;

conditional_expression = expression_term, { ( "==", "!=", ">", ">=", "<", "<=" ),  expression_term } ;

expression_term = expression_factor, { "||", expression_factor } ;

expression_factor = expression_summand, { "&&", expression_summand } ;

expression_summand =  expression_product, { ( "+" | "-" ),  expression_product } ;

expression_product = factor, { ( "*" | "/" ), factor }
                   | "(", expression, ")" ;

factor = integer
       | string
       | identifier, [ call ]
       | block, "(", ")" ;

call = "(", [ call_expression_sequence ], ")" ;

call_expression_sequence = inline_statement, { ";" inline_statement } ;

function_interface = function_interface_item, { ";" function_interface_item } ;

function_interface_item = identifier, identifier, [ "=", conditional_expression ]
                        | ref, identifier, identifier ;
